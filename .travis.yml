language: go

env:
  DOCKER_COMPOSE_VERSION: 1.8.0

install:
  # Install or update docker-compose
  - sudo apt-get update
  - sudo apt-get install -o Dpkg::Options::="--force-confold" --force-yes -y docker-ce
  - docker-compose --version
  - sudo rm /usr/local/bin/docker-compose
  - curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose
  - chmod +x docker-compose
  - sudo mv docker-compose /usr/local/bin
  - docker-compose --version

before_script:
  # SSH key prepare
  - mv infrastructure/deploy.key.gpg .
  - gpg --yes --batch --passphrase=${DEPLOY_KEY_PASSWORD} deploy.key.gpg
  - chmod 600 deploy.key
  - mv deploy.key ~/.ssh
  - ssh-keyscan ${DEPLOY_SSH_HOST} >> ~/.ssh/known_hosts
  - echo "Host deploy" >> ~/.ssh/config
  - echo "  HostName ${DEPLOY_SSH_HOST}" >> ~/.ssh/config
  - echo "  User ${DEPLOY_SSH_USER}" >> ~/.ssh/config
  - echo "  IdentityFile ~/.ssh/deploy.key" >> ~/.ssh/config

  # Docker TLS certificates prepare
  - mv infrastructure/docker-ssl.tar.tgz.gpg .
  - gpg --yes --batch --passphrase=${DEPLOY_KEY_PASSWORD} docker-ssl.tar.tgz.gpg
  - tar -zxvf docker-ssl.tar.tgz

  # Running tests
  - docker-compose run --no-deps application go test -v ./tests/...
script:
  # Deploy with docker compose only for branch master
  - export DOCKER_HOST=${DEPLOY_SSH_HOST}:${DEPLOY_DOCKER_PORT}
  - export DOCKER_TLS_VERIFY=1
  - export DOCKER_CERT_PATH=${TRAVIS_BUILD_DIR}/docker-ssl

  # Installing migration tool
  - ssh deploy wget https://github.com/Vehsamrak/sql-migrate-ubuntu/releases/download/1.0.0/sql-migrate
  - if [ "$TRAVIS_BRANCH" == "master" ]; then ssh deploy chmod +x sql-migrate; else echo "skipped"; fi
  - scp infrastructure/migrations/dbconfig.yml deploy:dbconfig.yml
  - ssh deploy ls

  # Running migrations
  - if [ "$TRAVIS_BRANCH" == "master" ]; then ssh deploy ./sql-migrate up; else echo "skipped"; fi

  # Stopping old application
  - if [ "$TRAVIS_BRANCH" == "master" ]; then docker ps -a; else echo "skipped"; fi
  - if [ "$TRAVIS_BRANCH" == "master" ]; then docker-compose down; else echo "skipped"; fi

  # Starting new application
  - if [ "$TRAVIS_BRANCH" == "master" ]; then docker-compose up -d --build; else echo "skipped"; fi

  # Clearing unused images and containers
  - if [ "$TRAVIS_BRANCH" == "master" ]; then docker --tlsverify -H=${DOCKER_HOST} --tlscacert=${DOCKER_CERT_PATH}/ca.pem --tlscert=${DOCKER_CERT_PATH}/cert.pem --tlskey=${DOCKER_CERT_PATH}/key.pem image prune -f; else echo "skipped"; fi
  - if [ "$TRAVIS_BRANCH" == "master" ]; then docker --tlsverify -H=${DOCKER_HOST} --tlscacert=${DOCKER_CERT_PATH}/ca.pem --tlscert=${DOCKER_CERT_PATH}/cert.pem --tlskey=${DOCKER_CERT_PATH}/key.pem container prune -f; else echo "skipped"; fi
